import { deserializationPolicy, getDefaultProxySettings, proxyPolicy, RequestPolicyFactory } from "@azure/ms-rest-js";
import { ProxySettings } from "@azure/ms-rest-js/es/lib/serviceClient";

import { BrowserPolicyFactory } from "./BrowserPolicyFactory";
import { Credential } from "./credentials/Credential";
import { DataLakeStorageClientContext } from "./generated/lib/dataLakeStorageClientContext";
import { LoggingPolicyFactory } from "./LoggingPolicyFactory";
import { IHTTPClient, IHTTPPipelineLogger, Pipeline } from "./Pipeline";
import { IRetryOptions, RetryPolicyFactory } from "./RetryPolicyFactory";
import { ITelemetryOptions, TelemetryPolicyFactory } from "./TelemetryPolicyFactory";
import { UniqueRequestIDPolicyFactory } from "./UniqueRequestIDPolicyFactory";
import { SERVICE_VERSION } from "./utils/constants";
import { getURLBaseURI } from "./utils/utils.common";

export { deserializationPolicy };

/**
 * Option interface for Pipeline.newPipeline method.
 *
 * @export
 * @interface INewPipelineOptions
 */
export interface INewPipelineOptions {
  /**
   * Telemetry configures the built-in telemetry policy behavior.
   *
   * @type {ITelemetryOptions}
   * @memberof INewPipelineOptions
   */
  telemetry?: ITelemetryOptions;
  retryOptions?: IRetryOptions;

  logger?: IHTTPPipelineLogger;
  httpClient?: IHTTPClient;

  proxySettings?: ProxySettings;
}

/**
 * A ServiceURL represents a based URL class for ServiceURL, ContainerURL and etc.
 *
 * @export
 * @class StorageURL
 */
export abstract class StorageURL {
  /**
   * A static method used to create a new Pipeline object with Credential provided.
   *
   * @static
   * @param {Credential} credential Such as AnonymousCredential, SharedKeyCredential or TokenCredential.
   * @param {INewPipelineOptions} [pipelineOptions] Optional. Options.
   * @returns {Pipeline} A new Pipeline object.
   * @memberof Pipeline
   */
  public static newPipeline(
    credential: Credential,
    pipelineOptions: INewPipelineOptions = {}
  ): Pipeline {
    const proxySettings = pipelineOptions.proxySettings || getDefaultProxySettings();

    // Order is important. Closer to the API at the top & closer to the network at the bottom.
    // The credential's policy factory must appear close to the wire so it can sign any
    // changes made by other factories (like UniqueRequestIDPolicyFactory)
    const factories: RequestPolicyFactory[] = [];
    factories.push(new TelemetryPolicyFactory(pipelineOptions.telemetry));
    factories.push(new UniqueRequestIDPolicyFactory());
    factories.push(new BrowserPolicyFactory());
    factories.push(deserializationPolicy()); // Default deserializationPolicy is provided by protocol layer
    if (proxySettings) {
      factories.push(proxyPolicy(proxySettings));
    }
    factories.push(new RetryPolicyFactory(pipelineOptions.retryOptions));
    factories.push(new LoggingPolicyFactory());
    factories.push(credential);

    return new Pipeline(factories, {
      HTTPClient: pipelineOptions.httpClient,
      logger: pipelineOptions.logger
    });
  }

  /**
   * Request policy pipeline.
   *
   * @internal
   * @type {Pipeline}
   * @memberof StorageURL
   */
  public readonly pipeline: Pipeline;

  /**
   * Readonly. URL string value.
   *
   * @type {string}
   * @memberof StorageURL
   */
  public readonly url: string;

  /**
   * storageClientContext is a reference to protocol layer operations entry, which is
   * generated by AutoRest generator.
   *
   * @protected
   * @type {DataLakeStorageClientContext}
   * @memberof StorageURL
   */
  protected readonly storageClientContext: DataLakeStorageClientContext;

  /**
   * Creates an instance of StorageURL.
   * @param {string} url
   * @param {Pipeline} pipeline
   * @memberof StorageURL
   */
  protected constructor(url: string, pipeline: Pipeline) {
    this.url = url;
    this.pipeline = pipeline;

    this.storageClientContext = new DataLakeStorageClientContext("", {
      ...pipeline.toServiceClientOptions(),
      xMsVersion: SERVICE_VERSION
    });

    // Fully control the url in the convenience layer by injecting baseUri property
    const storageClientContext = this.storageClientContext as any;
    storageClientContext.baseUri = getURLBaseURI(this.url);
  }
}
